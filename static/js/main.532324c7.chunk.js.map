{"version":3,"sources":["components/MapContainer/MapContainer.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["GoogleApiWrapper","apiKey","lat","lon","google","className","props","zoom","style","width","height","center","lng","initialCenter","position","Form","stateNames","getCities","cityNames","getLocation","onChange","name","filter","item","index","indexOf","map","key","value","App","state","data","city","error","message","e","STATE_NAME","target","axios","get","then","response","filterCities","districts","setState","catch","console","log","CITY","results","filterStates","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.532324c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\n\r\nconst MapContainer = ({ lat, lon, google }) => {\r\n  const mapStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n  };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      {this.props.lat && this.props.lon && (\r\n        <Map\r\n          google={this.props.google}\r\n          zoom={10}\r\n          style={mapStyles}\r\n          center={{ lat: this.props.lat, lng: this.props.lon }}\r\n          initialCenter={{ lat: this.props.lat, lng: this.props.lon }}\r\n        >\r\n          <Marker position={{ lat: this.props.lat, lng: this.props.lon }} />\r\n        </Map>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBJAX_DQYM7ovn7-K6k74A7j8hXKtMOLjc',\r\n})(MapContainer);\r\n","import React from 'react';\r\n\r\nexport const Form = ({ stateNames, getCities, cityNames, getLocation }) => {\r\n  return stateNames ? (\r\n    <div>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label>\r\n            <h4>State</h4>\r\n          </label>\r\n          <select className=\"form-control\" onChange={getCities} name=\"states\">\r\n            {stateNames\r\n              .filter((item, index) => {\r\n                return stateNames.indexOf(item) >= index;\r\n              })\r\n              .map((item, index) => {\r\n                return (\r\n                  <option key={index} value={item}>\r\n                    {item}\r\n                  </option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n        {cityNames ? (\r\n          <div className=\"form-group\">\r\n            <label>\r\n              <h4>City</h4>\r\n            </label>\r\n            <select className=\"form-control\" onChange={getLocation}>\r\n              {cityNames.map((item, index) => {\r\n                return (\r\n                  <option key={index} value={item}>\r\n                    {item}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </form>\r\n    </div>\r\n  ) : (\r\n    <h2>Loading...</h2>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport MapContainer from './components/MapContainer/MapContainer';\nimport { Form } from './components/Form/Form';\n\nclass App extends Component {\n  state = {\n    data: '',\n    stateNames: '',\n    cityNames: '',\n    city: false,\n    lat: '',\n    lon: '',\n    error: '',\n    message: 'Please Select a State',\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://a-ai-d7b83.firebaseio.com/states.json`)\n      .then(response => {\n        var filterStates = response.data.map(function (item) {\n          return item.state;\n        });\n        this.setState({\n          data: response.data,\n          stateNames: filterStates,\n          error: '',\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  getCities = e => {\n    const STATE_NAME = e.target.value;\n\n    axios\n      .get(`https://a-ai-d7b83.firebaseio.com/states.json`)\n      .then(response => {\n        var filterCities = response.data\n          .filter(function (item) {\n            return item.state === STATE_NAME;\n          })[0]\n          .districts.map(item => {\n            return item;\n          });\n\n        this.setState({\n          cityNames: filterCities,\n          error: '',\n          message: 'Please Select a City',\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          error: 'No Cities Found',\n        });\n      });\n  };\n\n  getLocation = e => {\n    const API_KEY = 'K2J9SmHHAOvyz8OxflzZKy35AoaEbMWg';\n    const CITY = e.target.value;\n\n    axios\n      .get(\n        `https://api.tomtom.com/search/2/geocode/${CITY}.json?key=${API_KEY}`\n      )\n      .then(response => {\n        console.log(response.data.results[0].position.lat);\n        this.setState({\n          lat: response.data.results[0].position.lat,\n          lon: response.data.results[0].position.lon,\n          message: '',\n          city: true,\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <div className=\"row no-gutters Alt-Row\">\n          <div className=\"col-md-12 col-lg-6 d-flex align-items-center justify-content-center\">\n            <Form\n              getCities={this.getCities}\n              getLocation={this.getLocation}\n              stateNames={this.state.stateNames}\n              cityNames={this.state.cityNames}\n            />\n          </div>\n          <div className=\"col-md-12 col-lg-6\">\n            {this.state.city ? (\n              <div className=\"map\">\n                <MapContainer lat={this.state.lat} lon={this.state.lon} />\n              </div>\n            ) : (\n              <h2 className=\"Map-Message\">{this.state.message}</h2>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}